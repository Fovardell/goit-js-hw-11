{"version":3,"file":"commonHelpers.js","sources":["../src/main.js"],"sourcesContent":["// У файлі pixabay-api.js зберігай функції для HTTP-запитів.\n// У файлі render-functions.js створи функції для відображення елементів інтерфейсу.\n// Створи застосунок пошуку зображень за ключовим словом і їх перегляду в галереї. Додай оформлення елементів інтерфейсу згідно з макетом.\n// необхідно виконувати HTTP-запит із цим пошуковим рядком.\n// При натисканні на кнопку відправки форми, додайте перевірку вмісту текстового поля на наявність порожнього рядка, щоб користувач не міг відправити запит, якщо поле пошуку порожнє.\n// Для бекенду використовуй публічний API сервіс Pixabay. Зареєструйся, отримай свій унікальний ключ доступу і ознайомся з документацією.\n// Список параметрів рядка запиту, які тобі обов'язково необхідно вказати:\n// key — твій унікальний ключ доступу до API.\n// q — слово для пошуку. Те, що буде вводити користувач.\n// image_type — тип зображення. Потрібні тільки фотографії, тому постав значення photo.\n// orientation — орієнтація фотографії. Постав значення horizontal.\n// safesearch — фільтр за віком. Постав значення true.\n// У відповіді буде об’єкт із декількома властивостями, в одному з яких буде масив зображень, що задовольнили критерії параметрів запиту.\n// Якщо бекенд повертає порожній масив, значить, нічого підходящого не було знайдено. У такому разі показуй повідомлення з текстом \"Sorry, there are no images matching your search query. Please try again!\". Для повідомлень використовуй бібліотеку iziToast.\n// Галерея і картки зображень\n// Елемент галереї (список однотипних елементів) міститься в HTML-документі, і в нього необхідно додавати розмітку карток зображень після HTTP-запитів.\n// Кожне зображення описується об'єктом, з якого тобі цікаві тільки такі властивості:\n// webformatURL — посилання на маленьке зображення для списку карток у галереї\n// largeImageURL — посилання на велике зображення для модального вікна\n// tags — рядок з описом зображення. Підійде для атрибута alt\n// likes — кількість вподобайок\n// views — кількість переглядів\n// comments — кількість коментарів\n// downloads — кількість завантажень\n// Перед пошуком за новим ключовим словом необхідно повністю очищати вміст галереї, щоб не змішувати результати запитів.\n// Подивись демовідео роботи застосунку на цьому етапі.\n// У розмітці необхідно буде обгорнути кожну картку зображення в посилання, як зазначено в документації в секції «Markup».\n// Бібліотека містить метод [refresh()](<https://github.com/andreknieriem/simplelightbox#public-methods>), який обов'язково потрібно викликати щоразу після додавання нових елементів до галереї.\n// Індикатор завантаження\n// Додай елемент, що сповіщає користувача про те, що йде процес завантаження зображень з бекенду. Завантажувач має з’являтися прямо перед початком HTTP запиту та зникати після того, як запит завершився.\nimport iziToast from \"izitoast\";\nimport SimpleLightbox from \"simplelightbox\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst form = document.querySelector('form');\nconst LINK = 'https://pixabay.com/api/';\nconst API_KEY = \"44037717-f466124c8e4208be15c31102c\";\nconst params = new URLSearchParams({\n\tkey: API_KEY,\n\timage_type: \"photo\",\n\torientation: \"horizontal\",\n\tsafesearch: \"true\",\n});\n\nform.addEventListener(\"submit\", (event) => {\n\tevent.preventDefault();\n\tparams.q = event.target.querry.value.trim().split(\" \").join(\"+\");\n\tconsole.log(params.q);\n\treturn fetch(`${LINK}?${params}`).then(res => {\n\t\tif (!res.ok) {\n\t\t\tthrow new Error(res.status);\n\t\t}\n\t\treturn res.json();\n\t}).then(res => { console.log(res); }).catch(error => { });\n});\n\n\n\n// На що буде звертати увагу ментор при перевірці:\n// Домашня робота містить два посилання: на вихідні файли і живу сторінку на GitHub Pages\n// Проєкт зібраний за допомогою Vite\n// Консоль в інструментах розробника не містить помилок, попереджень і консоль логів\n// До проєкту підключені бібліотеки iziToast, SimpleLightbox та css-loader\n// Елементи на сторінці стилізовані згідно з макетом (або власні стилі)\n// На сторінці присутня форма пошуку зображень за пошуковим словом\n// При сабміті форми перед відправкою запиту на бекенд з’являється індикатор завантаження з css-loader та очищаються попередні результати пошуку на сторінці\n// При сабміті форми відправляється запит на бекенд по ключовому слову для пошуку зображень з усіма параметрами, що вказані в ТЗ\n// Після отримання відповіді від бекенда зникає індикатор завантаження та на сторінці відмальовуються зображення на основі отриманих даних від бекенду, або з’являється повідомлення про те, що підходящих результатів не було знайдено\n// Нові зображення додаються в DOM за одну операцію\n// Після додавання нових елементів до списку зображень на екземплярі SimpleLightbox викликається метод refresh()\n// При кліку на маленьке зображення в галереї відкривається його збільшена версія у модальному вікні з використанням бібліотеки SimpleLightbox\n// Під час виконання HTTP-запитів використовуються обробники then() та catch(), щоб опрацьовувати можливі помилки та запобігти “падінню” сторінки"],"names":["form","LINK","API_KEY","params","event","res","error"],"mappings":"0uBAoCA,MAAMA,EAAO,SAAS,cAAc,MAAM,EACpCC,EAAO,2BACPC,EAAU,qCACVC,EAAS,IAAI,gBAAgB,CAClC,IAAKD,EACL,WAAY,QACZ,YAAa,aACb,WAAY,MACb,CAAC,EAEDF,EAAK,iBAAiB,SAAWI,IAChCA,EAAM,eAAc,EACpBD,EAAO,EAAIC,EAAM,OAAO,OAAO,MAAM,KAAM,EAAC,MAAM,GAAG,EAAE,KAAK,GAAG,EAC/D,QAAQ,IAAID,EAAO,CAAC,EACb,MAAM,GAAGF,CAAI,IAAIE,CAAM,EAAE,EAAE,KAAKE,GAAO,CAC7C,GAAI,CAACA,EAAI,GACR,MAAM,IAAI,MAAMA,EAAI,MAAM,EAE3B,OAAOA,EAAI,MACX,CAAA,EAAE,KAAKA,GAAO,CAAE,QAAQ,IAAIA,CAAG,CAAI,CAAA,EAAE,MAAMC,GAAS,CAAG,CAAA,EACxD"}