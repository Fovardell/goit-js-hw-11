// У файлі pixabay-api.js зберігай функції для HTTP-запитів.
// У файлі render-functions.js створи функції для відображення елементів інтерфейсу.
// Створи застосунок пошуку зображень за ключовим словом і їх перегляду в галереї. Додай оформлення елементів інтерфейсу згідно з макетом.
// необхідно виконувати HTTP-запит із цим пошуковим рядком.
// При натисканні на кнопку відправки форми, додайте перевірку вмісту текстового поля на наявність порожнього рядка, щоб користувач не міг відправити запит, якщо поле пошуку порожнє.
// Для бекенду використовуй публічний API сервіс Pixabay. Зареєструйся, отримай свій унікальний ключ доступу і ознайомся з документацією.
// Список параметрів рядка запиту, які тобі обов'язково необхідно вказати:
// key — твій унікальний ключ доступу до API.
// q — слово для пошуку. Те, що буде вводити користувач.
// image_type — тип зображення. Потрібні тільки фотографії, тому постав значення photo.
// orientation — орієнтація фотографії. Постав значення horizontal.
// safesearch — фільтр за віком. Постав значення true.
// У відповіді буде об’єкт із декількома властивостями, в одному з яких буде масив зображень, що задовольнили критерії параметрів запиту.
// Якщо бекенд повертає порожній масив, значить, нічого підходящого не було знайдено. У такому разі показуй повідомлення з текстом "Sorry, there are no images matching your search query. Please try again!". Для повідомлень використовуй бібліотеку iziToast.
// Галерея і картки зображень
// Елемент галереї (список однотипних елементів) міститься в HTML-документі, і в нього необхідно додавати розмітку карток зображень після HTTP-запитів.
// Кожне зображення описується об'єктом, з якого тобі цікаві тільки такі властивості:
// webformatURL — посилання на маленьке зображення для списку карток у галереї
// largeImageURL — посилання на велике зображення для модального вікна
// tags — рядок з описом зображення. Підійде для атрибута alt
// likes — кількість вподобайок
// views — кількість переглядів
// comments — кількість коментарів
// downloads — кількість завантажень
// Перед пошуком за новим ключовим словом необхідно повністю очищати вміст галереї, щоб не змішувати результати запитів.
// Подивись демовідео роботи застосунку на цьому етапі.
// У розмітці необхідно буде обгорнути кожну картку зображення в посилання, як зазначено в документації в секції «Markup».
// Бібліотека містить метод [refresh()](<https://github.com/andreknieriem/simplelightbox#public-methods>), який обов'язково потрібно викликати щоразу після додавання нових елементів до галереї.
// Індикатор завантаження
// Додай елемент, що сповіщає користувача про те, що йде процес завантаження зображень з бекенду. Завантажувач має з’являтися прямо перед початком HTTP запиту та зникати після того, як запит завершився.
import iziToast from "izitoast";
import SimpleLightbox from "simplelightbox";

import "izitoast/dist/css/iziToast.min.css";
import "simplelightbox/dist/simple-lightbox.min.css";

const form = document.querySelector('form');
const LINK = 'https://pixabay.com/api/';
const API_KEY = "44037717-f466124c8e4208be15c31102c";
const params = new URLSearchParams({
	key: API_KEY,
	image_type: "photo",
	orientation: "horizontal",
	safesearch: "true",
});

form.addEventListener("submit", (event) => {
	event.preventDefault();
	params.q = event.target.querry.value.trim().split(" ").join("+");
	console.log(params.q);
	return fetch(`${LINK}?${params}`).then(res => {
		if (!res.ok) {
			throw new Error(res.status);
		}
		return res.json();
	}).then(res => { console.log(res); }).catch(error => { });
});



// На що буде звертати увагу ментор при перевірці:
// Домашня робота містить два посилання: на вихідні файли і живу сторінку на GitHub Pages
// Проєкт зібраний за допомогою Vite
// Консоль в інструментах розробника не містить помилок, попереджень і консоль логів
// До проєкту підключені бібліотеки iziToast, SimpleLightbox та css-loader
// Елементи на сторінці стилізовані згідно з макетом (або власні стилі)
// На сторінці присутня форма пошуку зображень за пошуковим словом
// При сабміті форми перед відправкою запиту на бекенд з’являється індикатор завантаження з css-loader та очищаються попередні результати пошуку на сторінці
// При сабміті форми відправляється запит на бекенд по ключовому слову для пошуку зображень з усіма параметрами, що вказані в ТЗ
// Після отримання відповіді від бекенда зникає індикатор завантаження та на сторінці відмальовуються зображення на основі отриманих даних від бекенду, або з’являється повідомлення про те, що підходящих результатів не було знайдено
// Нові зображення додаються в DOM за одну операцію
// Після додавання нових елементів до списку зображень на екземплярі SimpleLightbox викликається метод refresh()
// При кліку на маленьке зображення в галереї відкривається його збільшена версія у модальному вікні з використанням бібліотеки SimpleLightbox
// Під час виконання HTTP-запитів використовуються обробники then() та catch(), щоб опрацьовувати можливі помилки та запобігти “падінню” сторінки